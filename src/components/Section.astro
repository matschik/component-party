---
import fs from 'node:fs/promises';
import kebabCase from 'lodash.kebabcase';
import { Markdown } from "astro/components"
import nodePath from "node:path"
import Title from "../components/Title.svelte"
import FrameworkLabel from "../components/FrameworkLabel.astro"
import FRAMEWORKS from '../frameworks';
import CodeViewer from "./CodeViewer.astro"
import createVue3REPL from "../utils/createVue3REPL"
import createSvelteREPL from "../utils/createSvelteREPL"
import createReactREPL from "../utils/createReactREPL"

const { path: sectionPath } = Astro.props

const sectionId = sectionPath.split("/").pop()
const sectionRelativePath = sectionPath.split("/").slice(-2).join("/")

const sections = []

function dirNameToTitle(dirName) {
	return capitalize(dirName.split('-').splice(1).join(' '));
}

function capitalize(string) {
	return string.charAt(0).toUpperCase() + string.slice(1);
}

const vue3REPL = createVue3REPL()
const svelteREPL = createSvelteREPL()
const reactREPL = createReactREPL()

function generatePlaygroundURL(frameworkId, files){
  let playgroundURL
  if(frameworkId === "vue3"){
    const contentByFilename = files.reduce((acc, file) => {
      acc[file.fileName] =  file.content
      return acc
    }, {})
    playgroundURL = vue3REPL.fromContentByFilename(contentByFilename)
  } else if(frameworkId === "svelte"){
    const contentByFilename = files.reduce((acc, file) => {
      acc[file.fileName] =  file.content
      return acc
    }, {})
    playgroundURL = svelteREPL.fromContentByFilename(contentByFilename) 
  } else if(frameworkId === "react"){
    if (files.length > 1) return
    const contentByFilename = files.reduce((acc, file) => {
      acc[file.fileName] =  file.content
      return acc
    }, {})
    playgroundURL = reactREPL.fromContentByFilename(contentByFilename) 
  }
   return playgroundURL
}

const subSectionDirNames = await fs.readdir(sectionPath)

for(const dirName of subSectionDirNames){
    const path = `${sectionPath}/${dirName}`
    const title = dirNameToTitle(dirName)

    const frameworkDirs = await fs.readdir(path)
    const frameworkSections = []
    for(const frameworkDir of frameworkDirs){
        const frameworkPath = `${path}/${frameworkDir}`
        const files = []
        const fileNames = await fs.readdir(`${frameworkPath}`)

        for(const fileName of fileNames){
            const filePath = `${frameworkPath}/${fileName}`
            const ext = nodePath.parse(filePath).ext.split(".").pop()
            files.push({
                path: filePath,
                fileName,
                ext,
                content: await fs.readFile(filePath, "utf-8")
            })
        }

        frameworkSections.push({
            dirName: frameworkDir,
            path: frameworkPath,
            files,
            playgroundURL: generatePlaygroundURL(frameworkDir, files)
        })
    }

    
    sections.push({
        id: kebabCase(title),
        path,
        dirName,
        title,
        frameworkSections
    })
}

function getSectionFiles(section, framework){
  return section.frameworkSections.find((f) => f.dirName === framework.id)?.files
}

function getSectionMarkdownFiles(section, framework){
  return getSectionFiles(section, framework)?.filter(f => f.ext === "md")
}

function getSectionCodeFiles(section, framework){
  return getSectionFiles(section, framework)?.filter(f => f.ext !== "md")
}

function getFrameworkSectionPlaygroundURL(section, framework){
  return section.frameworkSections.find((f) => f.dirName === framework.id)?.playgroundURL
}
---
<script src="./Section/frameworkDisplay.js"></script>
<script src="./Section/codeViewer.js"></script>

<Title as="h1" content={dirNameToTitle(sectionId)} />

{
  sections.map((section) => (
    <>
      <Title as="h2" content={section.title} />
      <div class="flex items-center" style="margin: 0rem;">
        {FRAMEWORKS.map((framework) => (
          <button
            data-framework-button-show={framework.id}
            title={`Display ${framework.title}`}
            class="text-sm mt-4 rounded border border-gray-700 px-3 py-1 border-opacity-50 bg-gray-900 hover:bg-gray-800 transition-all mr-2"
            style="display: none;"
          >
            <FrameworkLabel id={framework.id} size={15} />
          </button>
        ))}
      </div>
      <div style="margin-top: 1rem;">
      {FRAMEWORKS.map((framework) => (
        <div data-framework-content={framework.id} style="display: none;margin-top: 0rem;">
          <div class="flex justify-between items-center space-x-3">
            <h3 style="margin-top: 0rem; margin-bottom: 0rem;">
              <FrameworkLabel id={framework.id} />
            </h3>
            <div class="flex items-center space-x-3">
              {getFrameworkSectionPlaygroundURL(section, framework) && 
                <a href={getFrameworkSectionPlaygroundURL(section, framework)} target="_blank">
                  <button class="opacity-30 hover:opacity-100 bg-gray-800 hover:bg-gray-700 py-1 px-1.5 rounded transition-all" title={`Open playground for ${framework.title}`} aria-label={`Open playground for ${framework.title}`} >
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                        <path stroke-linecap="round" stroke-linejoin="round" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                  </button>
                </a>
              }
              <button class="opacity-30 hover:opacity-100 bg-gray-800 hover:bg-gray-700 py-1 px-1.5 rounded transition-all" title={`Hide ${framework.title} snippets`} aria-label={`Hide ${framework.title} snippets`} data-framework-button-hide={framework.id}>
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                </svg>
              </button>
            </div>
          </div>
          <div class="mt-2">
            {getSectionMarkdownFiles(section, framework)?.length > 0 && 
                  <div>
                    {getSectionMarkdownFiles(section, framework).map((file) => (
                          <Markdown set:html={file.content} />
                    ))}
                  </div>
            }
            {getSectionCodeFiles(section, framework)?.length > 0 && (
              <>
                <div class="flex space-x-1 items-center ml-0">
                  {getSectionCodeFiles(section, framework).map((file, index) =>(
                      <button data-codeviewer={`${section.id}-${framework.id}`} data-file-button={file.fileName} class="bg-[#0d1117] py-1.5 px-3 text-xs rounded-t inline-block" style={`opacity: ${index === 0 ? 1  : 0.6};`}>
                        {file.fileName}
                      </button>
                  ))}
                </div>
                
                <div data-codeviewer={`${section.id}-${framework.id}`} data-file-selected={getSectionCodeFiles(section, framework)[0].fileName}>
                    {getSectionCodeFiles(section, framework).map((file, index) => (
                      <div data-file={file.fileName} style={`display: ${index === 0 ? "block"  : "none"};`}>
                        <CodeViewer path={file.path} editHref={`https://github.com/matschik/component-party/tree/main/${sectionRelativePath}/${section.dirName}/${framework.id}/${file.fileName}`} />
                      </div>
                    ))}
                </div>
              </>)
            }
            {!(getSectionFiles(section, framework)?.length) && 
              <pre class="missing-snippet">Oops, missing snippet ! <a href={`https://github.com/matschik/component-party/tree/main/${sectionRelativePath}/${section.dirName}`}>You can help us by contributing on Github.</a></pre>
            }
          </div>
        </div>
      ))}
      </div>
    </>
  ))
}
