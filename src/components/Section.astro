---
import Title from "../components/Title.svelte"
import FrameworkLabel from "../components/FrameworkLabel.astro"
import fs from 'node:fs/promises';
import kebabCase from 'lodash.kebabcase';
import nodePath from "node:path"
import FRAMEWORKS from '../frameworks';
import { Code } from "astro/components"

const { path: sectionPath } = Astro.props

const sectionId = sectionPath.split("/").pop()

const sections = []

function dirNameToTitle(dirName) {
	return capitalize(dirName.split('-').splice(1).join(' '));
}

function capitalize(string) {
	return string.charAt(0).toUpperCase() + string.slice(1);
}

const subSectionDirNames = await fs.readdir(sectionPath)

for(const dirName of subSectionDirNames){
    const path = `${sectionPath}/${dirName}`
    const title = dirNameToTitle(dirName)

    const frameworkDirs = await fs.readdir(path)
    const frameworkSections = []
    for(const frameworkDir of frameworkDirs){
        const frameworkPath = `${path}/${frameworkDir}`
        const files = []
        const fileNames = await fs.readdir(`${frameworkPath}`)

        for(const fileName of fileNames){
            const filePath = `${frameworkPath}/${fileName}`
            files.push({
                path: filePath,
                fileName: fileName,
                ext: nodePath.parse(filePath).ext.split(".").pop(),
                content: (await fs.readFile(filePath, "utf-8"))
            })
        }

        frameworkSections.push({
            dirName: frameworkDir,
            path: frameworkPath,
            files
        })
    }

    
    sections.push({
        id: kebabCase(title),
        path,
        dirName,
        title,
        frameworkSections
    })
}

function getSectionFiles(section, framework){
  return section.frameworkSections.find((f) => f.dirName === framework.id).files
}
---

<Title as="h1" content={dirNameToTitle(sectionId)} />

{
  sections.map((section) => (
    <>
      <Title as="h2" content={section.title} />
      {FRAMEWORKS.map((framework) => (
        <>
          <div data-framework-content={framework.id} style="display: none;">
            <div role="button" data-framework-button-hide={framework.id}>
              <h3 class="hover:bg-gray-800 transition-all rounded py-1 px-2">
                <FrameworkLabel id={framework.id} />
              </h3>
            </div>
            <div>
              {section.frameworkSections.find(
                (f) => f.dirName === framework.id
              ) && (
                <>
                  <div class="flex space-x-1 items-center ml-0">
                    {getSectionFiles(section, framework).map((file, index) =>(
                        <button data-codeviewer={`${section.id}-${framework.id}`} data-file-button={file.fileName} class="bg-gray-800 py-1.5 px-3 text-xs rounded-t inline-block" style={`font-weight: ${index === 0 ? 600  : 400};`}>
                          {file.fileName}
                        </button>
                    ))}
                  </div>
                  <div data-codeviewer={`${section.id}-${framework.id}`} data-file-selected={getSectionFiles(section, framework)[0].fileName}>
                      {getSectionFiles(section, framework).map((file, index) => (
                        <div data-file={file.fileName} style={`display: ${index === 0 ? "block"  : "none"};`}>
                          <Code code={file.content} lang={file.ext} />
                        </div>
                      ))}
                  </div>
                </>
              
              )}
            </div>
          </div>
        </>
      ))}
      <div class="flex items-center space-x-2" style="margin-top: 1rem;">
        {FRAMEWORKS.map((framework) => (
          <button
            data-framework-button-show={framework.id}
            title={`Display ${framework.title}`}
            class="text-sm rounded border border-gray-700 px-3 py-1 border-opacity-50 bg-gray-900 hover:bg-gray-800 transition-all"
            style="display: none;"
          >
            <FrameworkLabel id={framework.id} size={15} />
          </button>
        ))}
      </div>
    </>
  ))
}
